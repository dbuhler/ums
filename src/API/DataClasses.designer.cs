#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace API
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UNION")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChangeLog(ChangeLog instance);
    partial void UpdateChangeLog(ChangeLog instance);
    partial void DeleteChangeLog(ChangeLog instance);
    partial void InsertPlanMember(PlanMember instance);
    partial void UpdatePlanMember(PlanMember instance);
    partial void DeletePlanMember(PlanMember instance);
    partial void InsertContribution(Contribution instance);
    partial void UpdateContribution(Contribution instance);
    partial void DeleteContribution(Contribution instance);
    partial void InsertMaritalStatus(MaritalStatus instance);
    partial void UpdateMaritalStatus(MaritalStatus instance);
    partial void DeleteMaritalStatus(MaritalStatus instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertMemberStanding(MemberStanding instance);
    partial void UpdateMemberStanding(MemberStanding instance);
    partial void DeleteMemberStanding(MemberStanding instance);
    partial void InsertMemberStatus(MemberStatus instance);
    partial void UpdateMemberStatus(MemberStatus instance);
    partial void DeleteMemberStatus(MemberStatus instance);
    partial void InsertMemberType(MemberType instance);
    partial void UpdateMemberType(MemberType instance);
    partial void DeleteMemberType(MemberType instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPlan(Plan instance);
    partial void UpdatePlan(Plan instance);
    partial void DeletePlan(Plan instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::API.Properties.Settings.Default.ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ChangeLog> ChangeLogs
		{
			get
			{
				return this.GetTable<ChangeLog>();
			}
		}
		
		public System.Data.Linq.Table<PlanMember> PlanMembers
		{
			get
			{
				return this.GetTable<PlanMember>();
			}
		}
		
		public System.Data.Linq.Table<Contribution> Contributions
		{
			get
			{
				return this.GetTable<Contribution>();
			}
		}
		
		public System.Data.Linq.Table<MaritalStatus> MaritalStatus
		{
			get
			{
				return this.GetTable<MaritalStatus>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<MemberStanding> MemberStandings
		{
			get
			{
				return this.GetTable<MemberStanding>();
			}
		}
		
		public System.Data.Linq.Table<MemberStatus> MemberStatus
		{
			get
			{
				return this.GetTable<MemberStatus>();
			}
		}
		
		public System.Data.Linq.Table<MemberType> MemberTypes
		{
			get
			{
				return this.GetTable<MemberType>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Plan> Plans
		{
			get
			{
				return this.GetTable<Plan>();
			}
		}
		
		public System.Data.Linq.Table<MemberPerson> MemberPersons
		{
			get
			{
				return this.GetTable<MemberPerson>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChangeLog")]
	public partial class ChangeLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Time;
		
		private string _Table;
		
		private int _RecordID;
		
		private string _Field;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private string _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnTableChanging(string value);
    partial void OnTableChanged();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnFieldChanging(string value);
    partial void OnFieldChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    #endregion
		
		public ChangeLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Table]", Storage="_Table", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Table
		{
			get
			{
				return this._Table;
			}
			set
			{
				if ((this._Table != value))
				{
					this.OnTableChanging(value);
					this.SendPropertyChanging();
					this._Table = value;
					this.SendPropertyChanged("Table");
					this.OnTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", DbType="Int NOT NULL")]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Field
		{
			get
			{
				return this._Field;
			}
			set
			{
				if ((this._Field != value))
				{
					this.OnFieldChanging(value);
					this.SendPropertyChanging();
					this._Field = value;
					this.SendPropertyChanged("Field");
					this.OnFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="NVarChar(200)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="NVarChar(200)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlanMember")]
	public partial class PlanMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private int _PlanID;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<System.DateTime> _EffectiveDate;
		
		private EntitySet<Contribution> _Contributions;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<MemberStatus> _MemberStatus;
		
		private EntityRef<Plan> _Plan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnPlanIDChanging(int value);
    partial void OnPlanIDChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectiveDateChanged();
    #endregion
		
		public PlanMember()
		{
			this._Contributions = new EntitySet<Contribution>(new Action<Contribution>(this.attach_Contributions), new Action<Contribution>(this.detach_Contributions));
			this._Member = default(EntityRef<Member>);
			this._MemberStatus = default(EntityRef<MemberStatus>);
			this._Plan = default(EntityRef<Plan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlanID
		{
			get
			{
				return this._PlanID;
			}
			set
			{
				if ((this._PlanID != value))
				{
					if (this._Plan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanIDChanging(value);
					this.SendPropertyChanging();
					this._PlanID = value;
					this.SendPropertyChanged("PlanID");
					this.OnPlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._MemberStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="Date")]
		public System.Nullable<System.DateTime> EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlanMember_Contribution", Storage="_Contributions", ThisKey="MemberID,PlanID", OtherKey="MemberID,PlanID")]
		public EntitySet<Contribution> Contributions
		{
			get
			{
				return this._Contributions;
			}
			set
			{
				this._Contributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_PlanMember", Storage="_Member", ThisKey="MemberID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.PlanMembers.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.PlanMembers.Add(this);
						this._MemberID = value.ID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberStatus_PlanMember", Storage="_MemberStatus", ThisKey="StatusID", OtherKey="ID", IsForeignKey=true)]
		public MemberStatus MemberStatus
		{
			get
			{
				return this._MemberStatus.Entity;
			}
			set
			{
				MemberStatus previousValue = this._MemberStatus.Entity;
				if (((previousValue != value) 
							|| (this._MemberStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberStatus.Entity = null;
						previousValue.PlanMembers.Remove(this);
					}
					this._MemberStatus.Entity = value;
					if ((value != null))
					{
						value.PlanMembers.Add(this);
						this._StatusID = value.ID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MemberStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plan_PlanMember", Storage="_Plan", ThisKey="PlanID", OtherKey="ID", IsForeignKey=true)]
		public Plan Plan
		{
			get
			{
				return this._Plan.Entity;
			}
			set
			{
				Plan previousValue = this._Plan.Entity;
				if (((previousValue != value) 
							|| (this._Plan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plan.Entity = null;
						previousValue.PlanMembers.Remove(this);
					}
					this._Plan.Entity = value;
					if ((value != null))
					{
						value.PlanMembers.Add(this);
						this._PlanID = value.ID;
					}
					else
					{
						this._PlanID = default(int);
					}
					this.SendPropertyChanged("Plan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.PlanMember = this;
		}
		
		private void detach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.PlanMember = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contribution")]
	public partial class Contribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MemberID;
		
		private int _PlanID;
		
		private int _OrganizationID;
		
		private System.DateTime _EntryDate;
		
		private System.DateTime _EffectiveDate;
		
		private string _BatchID;
		
		private int _Units;
		
		private int _Rate;
		
		private EntityRef<PlanMember> _PlanMember;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnPlanIDChanging(int value);
    partial void OnPlanIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnEntryDateChanging(System.DateTime value);
    partial void OnEntryDateChanged();
    partial void OnEffectiveDateChanging(System.DateTime value);
    partial void OnEffectiveDateChanged();
    partial void OnBatchIDChanging(string value);
    partial void OnBatchIDChanged();
    partial void OnUnitsChanging(int value);
    partial void OnUnitsChanged();
    partial void OnRateChanging(int value);
    partial void OnRateChanged();
    #endregion
		
		public Contribution()
		{
			this._PlanMember = default(EntityRef<PlanMember>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._PlanMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanID", DbType="Int NOT NULL")]
		public int PlanID
		{
			get
			{
				return this._PlanID;
			}
			set
			{
				if ((this._PlanID != value))
				{
					if (this._PlanMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanIDChanging(value);
					this.SendPropertyChanging();
					this._PlanID = value;
					this.SendPropertyChanged("PlanID");
					this.OnPlanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="Date NOT NULL")]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="Date NOT NULL")]
		public System.DateTime EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchID", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string BatchID
		{
			get
			{
				return this._BatchID;
			}
			set
			{
				if ((this._BatchID != value))
				{
					this.OnBatchIDChanging(value);
					this.SendPropertyChanging();
					this._BatchID = value;
					this.SendPropertyChanged("BatchID");
					this.OnBatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="Int NOT NULL")]
		public int Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Int NOT NULL")]
		public int Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlanMember_Contribution", Storage="_PlanMember", ThisKey="MemberID,PlanID", OtherKey="MemberID,PlanID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PlanMember PlanMember
		{
			get
			{
				return this._PlanMember.Entity;
			}
			set
			{
				PlanMember previousValue = this._PlanMember.Entity;
				if (((previousValue != value) 
							|| (this._PlanMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlanMember.Entity = null;
						previousValue.Contributions.Remove(this);
					}
					this._PlanMember.Entity = value;
					if ((value != null))
					{
						value.Contributions.Add(this);
						this._MemberID = value.MemberID;
						this._PlanID = value.PlanID;
					}
					else
					{
						this._MemberID = default(int);
						this._PlanID = default(int);
					}
					this.SendPropertyChanged("PlanMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Contribution", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Contributions.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Contributions.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaritalStatus")]
	public partial class MaritalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MaritalStatus()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaritalStatus_Person", Storage="_Persons", ThisKey="ID", OtherKey="MaritalStatusID")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PersonID;
		
		private System.Nullable<int> _TypeID;
		
		private System.Nullable<int> _StandingID;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<System.DateTime> _EffectiveDate;
		
		private string _MemberNumber;
		
		private EntitySet<PlanMember> _PlanMembers;
		
		private EntityRef<MemberStanding> _MemberStanding;
		
		private EntityRef<MemberStatus> _MemberStatus;
		
		private EntityRef<MemberType> _MemberType;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    partial void OnStandingIDChanging(System.Nullable<int> value);
    partial void OnStandingIDChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectiveDateChanged();
    partial void OnMemberNumberChanging(string value);
    partial void OnMemberNumberChanged();
    #endregion
		
		public Member()
		{
			this._PlanMembers = new EntitySet<PlanMember>(new Action<PlanMember>(this.attach_PlanMembers), new Action<PlanMember>(this.detach_PlanMembers));
			this._MemberStanding = default(EntityRef<MemberStanding>);
			this._MemberStatus = default(EntityRef<MemberStatus>);
			this._MemberType = default(EntityRef<MemberType>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._MemberType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandingID", DbType="Int")]
		public System.Nullable<int> StandingID
		{
			get
			{
				return this._StandingID;
			}
			set
			{
				if ((this._StandingID != value))
				{
					if (this._MemberStanding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStandingIDChanging(value);
					this.SendPropertyChanging();
					this._StandingID = value;
					this.SendPropertyChanged("StandingID");
					this.OnStandingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._MemberStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="Date")]
		public System.Nullable<System.DateTime> EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberNumber", DbType="VarChar(12)")]
		public string MemberNumber
		{
			get
			{
				return this._MemberNumber;
			}
			set
			{
				if ((this._MemberNumber != value))
				{
					this.OnMemberNumberChanging(value);
					this.SendPropertyChanging();
					this._MemberNumber = value;
					this.SendPropertyChanged("MemberNumber");
					this.OnMemberNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_PlanMember", Storage="_PlanMembers", ThisKey="ID", OtherKey="MemberID")]
		public EntitySet<PlanMember> PlanMembers
		{
			get
			{
				return this._PlanMembers;
			}
			set
			{
				this._PlanMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberStanding_Member", Storage="_MemberStanding", ThisKey="StandingID", OtherKey="ID", IsForeignKey=true)]
		public MemberStanding MemberStanding
		{
			get
			{
				return this._MemberStanding.Entity;
			}
			set
			{
				MemberStanding previousValue = this._MemberStanding.Entity;
				if (((previousValue != value) 
							|| (this._MemberStanding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberStanding.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._MemberStanding.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._StandingID = value.ID;
					}
					else
					{
						this._StandingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MemberStanding");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberStatus_Member", Storage="_MemberStatus", ThisKey="StatusID", OtherKey="ID", IsForeignKey=true)]
		public MemberStatus MemberStatus
		{
			get
			{
				return this._MemberStatus.Entity;
			}
			set
			{
				MemberStatus previousValue = this._MemberStatus.Entity;
				if (((previousValue != value) 
							|| (this._MemberStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberStatus.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._MemberStatus.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._StatusID = value.ID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MemberStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberType_Member", Storage="_MemberType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public MemberType MemberType
		{
			get
			{
				return this._MemberType.Entity;
			}
			set
			{
				MemberType previousValue = this._MemberType.Entity;
				if (((previousValue != value) 
							|| (this._MemberType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberType.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._MemberType.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MemberType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Member", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlanMembers(PlanMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_PlanMembers(PlanMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberStanding")]
	public partial class MemberStanding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MemberStanding()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberStanding_Member", Storage="_Members", ThisKey="ID", OtherKey="StandingID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberStanding = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberStanding = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberStatus")]
	public partial class MemberStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private EntitySet<PlanMember> _PlanMembers;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MemberStatus()
		{
			this._PlanMembers = new EntitySet<PlanMember>(new Action<PlanMember>(this.attach_PlanMembers), new Action<PlanMember>(this.detach_PlanMembers));
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberStatus_PlanMember", Storage="_PlanMembers", ThisKey="ID", OtherKey="StatusID")]
		public EntitySet<PlanMember> PlanMembers
		{
			get
			{
				return this._PlanMembers;
			}
			set
			{
				this._PlanMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberStatus_Member", Storage="_Members", ThisKey="ID", OtherKey="StatusID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlanMembers(PlanMember entity)
		{
			this.SendPropertyChanging();
			entity.MemberStatus = this;
		}
		
		private void detach_PlanMembers(PlanMember entity)
		{
			this.SendPropertyChanging();
			entity.MemberStatus = null;
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberStatus = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberType")]
	public partial class MemberType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MemberType()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberType_Member", Storage="_Members", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberType = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _ContactID;
		
		private EntitySet<Contribution> _Contributions;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    #endregion
		
		public Organization()
		{
			this._Contributions = new EntitySet<Contribution>(new Action<Contribution>(this.attach_Contributions), new Action<Contribution>(this.detach_Contributions));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Contribution", Storage="_Contributions", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<Contribution> Contributions
		{
			get
			{
				return this._Contributions;
			}
			set
			{
				this._Contributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Organization", Storage="_Person", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Organizations.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Organizations.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<char> _Initial;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<System.DateTime> _DeathDate;
		
		private System.Nullable<char> _Gender;
		
		private string _Address;
		
		private string _PostalCode;
		
		private string _City;
		
		private string _ProvinceState;
		
		private string _Country;
		
		private string _HomePhone;
		
		private string _WorkPhone;
		
		private string _CellPhone;
		
		private string _Fax;
		
		private string _Sin;
		
		private string _Email;
		
		private System.Nullable<int> _MaritalStatusID;
		
		private string _Comments;
		
		private EntitySet<Member> _Members;
		
		private EntitySet<Organization> _Organizations;
		
		private EntityRef<MaritalStatus> _MaritalStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnInitialChanging(System.Nullable<char> value);
    partial void OnInitialChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnDeathDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeathDateChanged();
    partial void OnGenderChanging(System.Nullable<char> value);
    partial void OnGenderChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceStateChanging(string value);
    partial void OnProvinceStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnSinChanging(string value);
    partial void OnSinChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMaritalStatusIDChanging(System.Nullable<int> value);
    partial void OnMaritalStatusIDChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Person()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._Organizations = new EntitySet<Organization>(new Action<Organization>(this.attach_Organizations), new Action<Organization>(this.detach_Organizations));
			this._MaritalStatus = default(EntityRef<MaritalStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial", DbType="NChar(1)")]
		public System.Nullable<char> Initial
		{
			get
			{
				return this._Initial;
			}
			set
			{
				if ((this._Initial != value))
				{
					this.OnInitialChanging(value);
					this.SendPropertyChanging();
					this._Initial = value;
					this.SendPropertyChanged("Initial");
					this.OnInitialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeathDate", DbType="Date")]
		public System.Nullable<System.DateTime> DeathDate
		{
			get
			{
				return this._DeathDate;
			}
			set
			{
				if ((this._DeathDate != value))
				{
					this.OnDeathDateChanging(value);
					this.SendPropertyChanging();
					this._DeathDate = value;
					this.SendPropertyChanged("DeathDate");
					this.OnDeathDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1)")]
		public System.Nullable<char> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(20)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceState", DbType="Char(2)")]
		public string ProvinceState
		{
			get
			{
				return this._ProvinceState;
			}
			set
			{
				if ((this._ProvinceState != value))
				{
					this.OnProvinceStateChanging(value);
					this.SendPropertyChanging();
					this._ProvinceState = value;
					this.SendPropertyChanged("ProvinceState");
					this.OnProvinceStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(200)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(15)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="VarChar(15)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(15)")]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(15)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sin", DbType="Char(9)")]
		public string Sin
		{
			get
			{
				return this._Sin;
			}
			set
			{
				if ((this._Sin != value))
				{
					this.OnSinChanging(value);
					this.SendPropertyChanging();
					this._Sin = value;
					this.SendPropertyChanged("Sin");
					this.OnSinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusID", DbType="Int")]
		public System.Nullable<int> MaritalStatusID
		{
			get
			{
				return this._MaritalStatusID;
			}
			set
			{
				if ((this._MaritalStatusID != value))
				{
					if (this._MaritalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaritalStatusIDChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusID = value;
					this.SendPropertyChanged("MaritalStatusID");
					this.OnMaritalStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(64)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Member", Storage="_Members", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Organization", Storage="_Organizations", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<Organization> Organizations
		{
			get
			{
				return this._Organizations;
			}
			set
			{
				this._Organizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MaritalStatus_Person", Storage="_MaritalStatus", ThisKey="MaritalStatusID", OtherKey="ID", IsForeignKey=true)]
		public MaritalStatus MaritalStatus
		{
			get
			{
				return this._MaritalStatus.Entity;
			}
			set
			{
				MaritalStatus previousValue = this._MaritalStatus.Entity;
				if (((previousValue != value) 
							|| (this._MaritalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalStatus.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._MaritalStatus.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._MaritalStatusID = value.ID;
					}
					else
					{
						this._MaritalStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MaritalStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Plan]")]
	public partial class Plan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private decimal _StandardContributionRate;
		
		private string _BusinessNumber;
		
		private EntitySet<PlanMember> _PlanMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStandardContributionRateChanging(decimal value);
    partial void OnStandardContributionRateChanged();
    partial void OnBusinessNumberChanging(string value);
    partial void OnBusinessNumberChanged();
    #endregion
		
		public Plan()
		{
			this._PlanMembers = new EntitySet<PlanMember>(new Action<PlanMember>(this.attach_PlanMembers), new Action<PlanMember>(this.detach_PlanMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardContributionRate", DbType="Decimal(6,4) NOT NULL")]
		public decimal StandardContributionRate
		{
			get
			{
				return this._StandardContributionRate;
			}
			set
			{
				if ((this._StandardContributionRate != value))
				{
					this.OnStandardContributionRateChanging(value);
					this.SendPropertyChanging();
					this._StandardContributionRate = value;
					this.SendPropertyChanged("StandardContributionRate");
					this.OnStandardContributionRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessNumber", DbType="Char(15) NOT NULL", CanBeNull=false)]
		public string BusinessNumber
		{
			get
			{
				return this._BusinessNumber;
			}
			set
			{
				if ((this._BusinessNumber != value))
				{
					this.OnBusinessNumberChanging(value);
					this.SendPropertyChanging();
					this._BusinessNumber = value;
					this.SendPropertyChanged("BusinessNumber");
					this.OnBusinessNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plan_PlanMember", Storage="_PlanMembers", ThisKey="ID", OtherKey="PlanID")]
		public EntitySet<PlanMember> PlanMembers
		{
			get
			{
				return this._PlanMembers;
			}
			set
			{
				this._PlanMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlanMembers(PlanMember entity)
		{
			this.SendPropertyChanging();
			entity.Plan = this;
		}
		
		private void detach_PlanMembers(PlanMember entity)
		{
			this.SendPropertyChanging();
			entity.Plan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberPerson")]
	public partial class MemberPerson
	{
		
		private int _ID;
		
		private int _PersonID;
		
		private System.Nullable<int> _TypeID;
		
		private System.Nullable<int> _StandingID;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<System.DateTime> _EffectiveDate;
		
		private string _MemberNumber;
		
		private string _Title;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<char> _Initial;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<System.DateTime> _DeathDate;
		
		private System.Nullable<char> _Gender;
		
		private string _Address;
		
		private string _PostalCode;
		
		private string _City;
		
		private string _ProvinceState;
		
		private string _Country;
		
		private string _HomePhone;
		
		private string _WorkPhone;
		
		private string _CellPhone;
		
		private string _Fax;
		
		private string _Sin;
		
		private string _Email;
		
		private System.Nullable<int> _MaritalStatusID;
		
		private string _Comments;
		
		public MemberPerson()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this._PersonID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandingID", DbType="Int")]
		public System.Nullable<int> StandingID
		{
			get
			{
				return this._StandingID;
			}
			set
			{
				if ((this._StandingID != value))
				{
					this._StandingID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="Date")]
		public System.Nullable<System.DateTime> EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this._EffectiveDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberNumber", DbType="VarChar(12)")]
		public string MemberNumber
		{
			get
			{
				return this._MemberNumber;
			}
			set
			{
				if ((this._MemberNumber != value))
				{
					this._MemberNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial", DbType="NChar(1)")]
		public System.Nullable<char> Initial
		{
			get
			{
				return this._Initial;
			}
			set
			{
				if ((this._Initial != value))
				{
					this._Initial = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this._BirthDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeathDate", DbType="Date")]
		public System.Nullable<System.DateTime> DeathDate
		{
			get
			{
				return this._DeathDate;
			}
			set
			{
				if ((this._DeathDate != value))
				{
					this._DeathDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1)")]
		public System.Nullable<char> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(20)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this._PostalCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceState", DbType="Char(2)")]
		public string ProvinceState
		{
			get
			{
				return this._ProvinceState;
			}
			set
			{
				if ((this._ProvinceState != value))
				{
					this._ProvinceState = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(200)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this._Country = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(15)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this._HomePhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="VarChar(15)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this._WorkPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(15)")]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this._CellPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(15)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this._Fax = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sin", DbType="Char(9)")]
		public string Sin
		{
			get
			{
				return this._Sin;
			}
			set
			{
				if ((this._Sin != value))
				{
					this._Sin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaritalStatusID", DbType="Int")]
		public System.Nullable<int> MaritalStatusID
		{
			get
			{
				return this._MaritalStatusID;
			}
			set
			{
				if ((this._MaritalStatusID != value))
				{
					this._MaritalStatusID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(64)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
